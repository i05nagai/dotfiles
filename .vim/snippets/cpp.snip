include c.snip

# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"${0}

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     mfunction
abbr        void className::funcitonName() {}
    ${1} ${2}::${3}(${4})
    {
        ${5}
    }

snippet     bs
abbr        boost::shared_ptr
    boost::shared_ptr<${1}>${2} ${0:TARGET}

snippet     bv
abbr        boost::numeric::ublas::vector
    boost::numeric::ublas::vector<${1}>${2} ${0:TARGET}

snippet     sv
abbr        std::vector
    std::vector<${1}> ${0:TARGET}

snippet     bm
abbr        boost::numeric::ublas::matrix
    boost::numeric::ublas::matrix<${1}>${2} ${0:TARGET}

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     cfunc
abbr        void className::funcitonName() {}
    ${1}::$1(${2})
    {
        ${0:TARGET}
    }

snippet     dfunc
abbr        void className::funcitonName() {}
    ~${1}::$1(${2})
    {
        ${0:TARGET}
    }

snippet     mfunc
abbr        void className::funcitonName() {}
    ${1} ${2}::${3}(${4})
    {
        ${5}
    }

snippet     comment
abbr        /**** comment *****/
    /******************************************************************************
    * ${0:TARGET}.
    ******************************************************************************/

snippet     comment4
abbr        /**** comment *****/
    /**************************************************************************
    * ${0:TARGET}.
    **************************************************************************/

snippet     comment8
abbr        /**** comment *****/
    /**********************************************************************
    * ${0:TARGET}.
    **********************************************************************/

snippet     cdcomment
abbr        Constructers and Destructers
    Constructers and Destructer

snippet     mcomment
abbr        member functions
    member functions

snippet     pvfcomment
abbr        pure virtual functions
    pure virtual functions

snippet     ipvfcomment
abbr        inherited pure virtual functions
    inherited pure virtual functions

snippet     pvcomment
abbr        private variables 
    private variables

snippet     pfcomment
abbr        private variables 
    private functions

snippet     testclass
abbr        
    #ifndef ${1}_TEST_H_INCLUDED
    #define $1_TEST_H_INCLUDED

    #include <cppunit/extensions/HelperMacros.h>

    #include <boost/shared_ptr.hpp>

    #include <${2:test target}>

    namespace ${3:test namespace}_test {

        class ${4:TestClassName} : public CppUnit::TestFixture {
            CPPUNIT_TEST_SUITE($4);
            CPPUNIT_TEST(${0:test function});
            CPPUNIT_TEST_SUITE_END();

        public:
            $4();
            ~$4();

            void setUp();
            void tearDown();
                
        private:

        };  

        CPPUNIT_TEST_SUITE_REGISTRATION($4);
    } // namespace smoking_test

    #endif

snippet     testmain
abbr        int main(...
options     head
    #include <cppunit/ui/text/TestRunner.h>
    #include <cppunit/extensions/TestFactoryRegistry.h>

    int main(int argc, char const* argv[])
    {
        CppUnit::TextUi::TestRunner runner;
        runner.addTest(
            CppUnit::TestFactoryRegistry::getRegistry().makeTest());
        bool retcode = runner.run();

        return !retcode;
    }
  

