snippet     random_include
abbr        #include <random>
options     word
	#include <random>

snippet     random_mersenne_twister
abbr        mersenne twister
options     word
	std::mt19937 ${1:varName}(${2:seed}); 

snippet     random_uniform_int_from_to
abbr        uniform integer from to
options     word
	std::mt19937 ${1:varName}(${2:seed}); 
	std::uniform_int_distribution<> ${3:varName}(${4:from}, ${5:to});  
	$3($1);

snippet     random_uniform_double_from_to
abbr        uniform double from to
options     word
	std::mt19937 ${1:varName}(${2:seed}); 
	std::uniform_real_distribution<double> ${3:varName}(${4:from}, ${5:to});  
	$3($1);

snippet     random_normal_with_mean_variance
abbr        uniform normal with mean and variance
options     word
	std::mt19937 ${1:varName}(${2:seed}); 
	std::normal_distribution<> ${3:varName}(${4:mean}, ${5:variance});  
	$3($1);

snippet     template_random_number_generator_header
abbr        random number generator for test
options     head
	#pragma once
	#include <boost/random.hpp>
	
	namespace test_util {
	  class RandomNumber {
	  //private typedef
	  private:
	  //public typedef
	  public:
	  //public function
	  public:
	    RandomNumber(const std::size_t seed = 3252352);
	    /**
	     * @brief random value in [0, 1). 
	     *
	     * @return random value in [0, 1).
	     */
	    double operator()();
	    /**
	     * @brief [min, max)
	     *
	     * @param min
	     * @param max
	     *
	     * @return [min, max) 
	     */
	    double operator()(const double min, const double max);
	  //private function
	  private:
	  //private members
	  private:
	    boost::random::mt19937 _engine;
	    boost::random::uniform_01<double> _distribution;
	  }; // class RandomNumber {
	} // namespace test_util

snippet     template_random_number_generator_source
abbr        random number generator for test
options     word
	#include "test_util/RandomNumber.h"

	namespace test_util {
	  RandomNumber::RandomNumber(const std::size_t seed = 3252352)
	  : _engine(), _distribution()
	  {
	  }

	  double RandomNumber::operator()()
	  {
	    return _distribution(_engine);
	  }

	  double RandomNumber::operator()(const double min, const double max)
	  {
	    const int diff = max - min;
	    return (*this)() * diff + min;
	  }
	} // namespace test_util
