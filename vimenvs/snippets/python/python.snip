include python_abc.snip
include python_apache_beam.snip
include python_argparse.snip
include python_asyncio.snip
include python_base64.snip
include python_beautifulsoup.snip
include python_behave.snip
include python_bokeh.snip
include python_boto3.snip
include python_click.snip
include python_csv.snip
include python_cython.snip
include python_datetime.snip
include python_enum.snip
include python_faker.snip
include python_flask.snip
include python_functools.snip
include python_geopandas.snip
include python_google_cloud_bigquery.snip
include python_google_cloud_storage.snip
include python_gspread.snip
include python_holoviews.snip
include python_joblib.snip
include python_json.snip
include python_keras.snip
include python_logging.snip
include python_matplotlib.snip
include python_mecab.snip
include python_mimetypes.snip
include python_mock.snip
include python_mocktio.snip
include python_multiprocessing.snip
include python_nose.snip
include python_numpy.snip
include python_os.snip
include python_pandas.snip
include python_path.snip
include python_pillow.snip
include python_py4j.snip
include python_py_github.snip
include python_pygame.snip
include python_pyshp.snip
include python_pyspark.snip
include python_pystache.snip
include python_pytest.snip
include python_random.snip
include python_re.snip
include python_requests.snip
include python_scikit_image.snip
include python_scikit_learn.snip
include python_scipy.snip
include python_scrapy.snip
include python_setup_py.snip
include python_shapely.snip
include python_sklearn.snip
include python_sqlalchemy.snip
include python_sqlite.snip
include python_str.snip
include python_subprocess.snip
include python_tempfile.snip
include python_tensorflow.snip
include python_typing.snip
include python_timeit.snip
include python_unittest.snip
include python_urllib.snip
include python_uuid.snip
include python_yaml.snip
include sphinx.snip


snippet     import_path_show
abbr        import
options     word
	import sys
	print(sys.path)

snippet     os_working_directory_show
abbr        import
options     word
	import os
	print(os.getcwd())


#
# import
#
snippet     debug
abbr        import pdb;
options     word
	import pdb; pdb.set_trace() 

snippet     debug_pudb
abbr        from pudb import set_trace; set_trace()
options     word
	from pudb import set_trace; set_trace()

snippet     debug_ipdb
abbr        from ipdb import set_trace; set_trace()
options     word
	import ipdb; ipdb.set_trace()

snippet import
	import ${0:module}

snippet import_from
	from ${1:package} import ${0:module}

snippet     future
abbr        future
options     head
	from __future__ import absolute_import
	from __future__ import division
	from __future__ import print_function
	from __future__ import unicode_literals

#
# shebang
#
snippet shebang
	#!/usr/bin/env python
	# -*- coding: utf-8 -*-

snippet shebang3
	#!/usr/bin/env python3
	# -*- coding: utf-8 -*-

snippet utf8
    # -*- coding: utf-8 -*-

snippet with
	with ${1:expr} as ${2:var}:
		${0}

delete with_open
snippet with_open
	try:
		with open(${1:filename}, '${2:rwb}') as ${3:f}:
			${4:pass}
	except IOError as e:
		print(e)

snippet with_open_newline
	try:
		with open(${1:filename}, '${2:rwb}', newline='\n') as ${3:f}:
			${4:pass}
	except IOError as e:
		print(e)

snippet     print_to_file
abbr        print to file
options     word
	def print_to_file(filename, data):
		"""print_to_file
	
		:param filename: 
		:param data:
		"""
		with open(filename, "w") as f:
			string = json.dumps(data, indent=4, sort_keys=True)
			f.write(string)

#
# New Class
#
delete class
snippet     class
abbr        class
options     word
	class ${1:ClassName}(${2:object}):
	
		def __init__(self, ${4:arg}):
			${5:super($1, self).__init__()}
			self.$4 = $4

snippet def_method
	def ${1:mname}(self, ${2:arg}):
		${0}

snippet def
	def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
		${0}

snippet def_property
	def ${1:foo}():
		doc = "${2:The $1 property.}"
		def fget(self):
			${3:return self._$1}
		def fset(self, value):
			${4:self._$1 = value}
		def fdel(self):
			${0:del self._$1}
		return locals()
	$1 = property(**$1())

#
# if
#
snippet if
	if ${1:condition}:
		${0}

snippet if_else
	if ${1:condition}:
		${2}
	else:
		${0}

snippet if_elif
	elif ${1:condition}:
		${0}

snippet     if_is_list
abbr        if is list
options     word
	if isinstance(${1:var}, list):
		${0}

snippet     if_type
abbr        if type
options     word
	if isinstance(${1:var}, ${2:list/str/int}):
		${0}

#
# loop
#
snippet for
	for ${1:item} in ${2:items}:
		${0}

snippet while
	while ${1:condition}:
		${0}

snippet do_while
	while True:
		${1}
		if ${0:condition}:
			break

snippet unicode
	def __unicode__(self):
		${0:representation}

#
# exception
#
snippet try_except
	try:
		${1}
	except ${2:Exception} as ${3:e}:
		${4:print('Custom error message')}
		${0:raise $3}

snippet try_except_else
	try:
		${1}
	except ${2:Exception} as ${3:e}:
		${4:print('Custom error message')}
		${5:raise $3}
	else:
		${0}

snippet try_except_finally
	try:
		${1}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	finally:
		${0}

snippet try_except_else_finally
	try:
		${1}
	except ${2:Exception} as ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}

delete main
snippet     main
abbr        main
options     word
	def main():
		pass
	
	
	if __name__ == '__main__':
		${0:main()}

#
# docstring
#
snippet """
abbr        docstring
options     word
	"""${0:doc}
	"""

snippet docs_module
    """
    File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
    Author: `g:snips_author`
    Email: `g:snips_email`
    Github: `g:snips_github`
    Description: ${0}
    """

snippet     sleep
abbr        sleep
options     word
	# import time
	time.sleep(${1:sec})

snippet     time_start_end
abbr        sleep
options     word
	import time
	start = time.time()
	${0}
	elapsed_time = time.time() - start
	print("elapsed_time:{0} [sec]".format(elapsed_time))

#
# closure
#
snippet     closure_nonlocal
abbr        closure
options     word
	def ${1:f}():
		nonlcoal ${2}

#
# print
#
snippet     pretty_print_dict
abbr        pretty printer
options     word
	import pprint
	pprint.pprint(${2:dict})${0}

snippet     print_variable
abbr        print variable
options     word
	print('${1}: {0}'.format($1))

#
# argument
#
snippet     argument_sys
abbr        sys.argv
options     word
    # sys.argv[0] is name of scripts
    sys.argv[1]

snippet commandline_argument
    try:
        # Short option syntax: "hv:"
        # Long option syntax: "help" or "verbose="
        opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

    except getopt.GetoptError, err:
        # Print debug info
        print str(err)
        ${3:error_action}

    for option, argument in opts:
        if option in ("-h", "--help"):
            ${0}
        elif option in ("-v", "--verbose"):
            verbose = argument

#
# set
#
snippet     set_add_element
abbr        set add set
options     word
	${1:set_var}.add(${1:list or array}

snippet     set_add_set
abbr        set add set
options     word
	${1:set_var} |= ${2:set_var2}


#
# list
#
snippet     list_copy
abbr        list
options     word
	${1:var} = ${2:list}[:]

snippet     list_reverse
alias       tuple_reverse
abbr        list
options     word
	${1:var} = list(reversed(${2:list}))

#
# sort
#
snippet     sort_list_of_dict_by_elem
abbr        sort list of dict
options     head
	sorted(${1:list}, key=${2:lambda x: x['key']})${0}

snippet     sort_list_of_tuple_by_val
abbr        sort list of dict
options     head
	sorted(${1:list}, key=${2:lambda x: x[0]})${0}

snippet     sort_dict_by_value
abbr        sort list of dict
options     head
	sorted(${1:x}.items(), key=operator.itemgetter(1))${0}

snippet     sort_dict_by_key
abbr        sort list of dict
options     head
	sorted(${1:x}.items(), key=operator.itemgetter(0))${0}

snippet     func_name
abbr        get function name
options     word
    ${1:function}.__name__


snippet     decorator
abbr        get function name
options     word
	def ${1:recurse}(${2:variable}):
		"""Function decorator
		
		:return: function
		"""
		def wrap(f):
			def wrapped_f(tlist):
				f(tlist)
		
			return wrapped_f
		
		return wrap

snippet     download_file
abbr        download_file
options     word
	try:
		import urllib.request as request
	except Exception:
		import urllib2 as request
	
	
	def retrieve_file(url):
		response = request.urlopen(url)
		return response.read().decode('utf-8')
	
	
	def download_file(url, filename):
		request.urlretrieve(url, filename)

snippet     module_this
abbr        this module
options     word
	this_module = sys.modules[__name__]

#
# raise
#
snippet     raise_not_implemented_error
abbr        raise
options     word
	raise NotImplementedError

#
# dict
#
snippet     dict_merge_python35
abbr        dict
options     word
	{**${1:map1}, **${2:map2}}

snippet     dict_merge
abbr        dict
options     word
	def merge_two_dicts(x, y):
		z = x.copy()   # start with x's keys and values
		z.update(y)    # modifies z with y's keys and values & returns None
		return z
