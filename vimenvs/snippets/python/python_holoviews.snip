#
# import
#
snippet     hv_import
abbr        abbr
options     word
	import holoviews as hs

snippet     hv_import_streams
abbr        abbr
options     word
	import holoviews.streams as streams

snippet     hv_extension_matplotlib
abbr        abbr
options     word
	hv.extension('matplotlib')

snippet     hv_extension_bokeh
abbr        abbr
options     word
	hv.extension('bokeh')

#
# scatter
#
snippet     hv_scatter_plot
abbr        abbr
options     word
	hv.Points(${1})

snippet     hv_scatter_plot_with_histogram
abbr        abbr
options     word
	hv.Points(${1}).hist()

snippet     hv_scatter_plot_with_label
abbr        abbr
options     word
	hv.Points(${1}, label="${2:label}")

#
# bar
#
snippet     hv_bar
abbr        abbr
options     word
	hv.Bars((${1:label_1}, ${2:val_1}), (${3:label_2}, ${4:val_2}))

snippet     hv_bar_pd_df_zip
abbr        abbr
options     word
	hv.Bars(zip(${1:df}.index, $1.values))

snippet     hv_bar_pd_df
abbr        abbr
options     word
	hv.Bars(${1:df}, kdims=[${2:'x_axis_col_name'}], vdims=[${3:'y_axis_col_name'}])

#
# histogram
#
snippet     hv_histogram
abbr        histogram
options     word
	# import numpy as np
	frequencies, edge = np.histogram(${1:array_of_data}, ${2:num_bars})
	hv.Histogram(frequencies, edge)

snippet     hv_histogram_each_channel
abbr        histogram
options     word
	def draw_histogram(image, each_channel=True):
		if each_channel:
			hist, nbins = skimage.exposure.histogram(image[:, :, 0])
			values = list(zip(nbins, hist))
			chart = hv.Histogram(values, kdims='channel 0')
			for c in range(1, 3):
				hist, nbins = skimage.exposure.histogram(image[:, :, c])
				values = list(zip(nbins, hist))
				chart += hv.Histogram(values, kdims='channel ' + c)
		else:
			hist, nbins = skimage.exposure.histogram(image)
			chart = hv.Histogram(hist, nbins)
		return chart

snippet     hv_load_image
abbr        abbr
options     word
	# import numpy as np
	hv.RGB.load_image(${1:path_to_image})

#
# curve
#
snippet     hv_curve_multiple
abbr        abbr
options     word
	curve_dict = {params: gen_curve(params) for params in params_list}
	hv.NdOverlay(${1:curve_dict}, kdims="bar")

snippet     hv_curve
abbr        abbr
options     word
	hv.Curve((${1:x, y}), label="${2:label}")

#
# table
#
snippet     hv_table_kdims
abbr        table
options     word
	hv.Table(${1:pd_df}, kdims="${2:label}")

snippet     hv_table
abbr        table
options     word
	hv.Table(${1:pd_df})

snippet     hv_table_groupby
abbr        table
options     word
	table = table.groupby([${1:col_name}])

#
# grid matrix
#
snippet     hv_template_gridmatrix_from_table_groupby
abbr        table
options     word
	table = hv.Table(${1:pd_df})
	table_groupby = table.groupby([${2:col_name}])
	grid = hv.operation.gridmatrix(table_groupby, diagonal_type=hv.Scatter)
	grid.options('
		Scatter',
		tools=['hover', 'box_select'],
		bgcolor='#efe8e2',
		fill_alpha=0.2,
	size=4)

#
# layout
#
snippet     hv_layout_column
abbr        hv
options     word
	${1:layout}.options().cols(${2:num_col})

#
#
#
snippet     hv_heatmap
abbr        hv
options     word
	${1:points} = hv.HeatMap(
		${2:df_scatter},
		kdims=['${3:x_column}', '${3:y_column}'],
		vdims=['${5:color_column}'],
		label='${6:title of graph}'
	).options(
		tools=['hover'],
		colorbar=True,
		width=1000)
