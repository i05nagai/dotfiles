snippet     usage
abbr        usage
	function usage {
	    cat <<EOF
	${1:basename} is a tool for ...

	Usage:
	    $1 [command] [<options>]

	Options:
		--version, -v     print $1 version
		--help, -h        print this
	EOF
	}

snippet     version
abbr        version
	function version {
		echo "basename${0} version 0.0.1"
	}    
	
snippet     subcommand
abbr        subcommand
	case \${1} in
		start)
			start
		;;

		stop)
			stop
		;;

		restart)
			start && stop
		;;

		help|--help|-h)
			usage
		;;

		version|--version|-v)
			version
		;;
		
		*)
			echo "[ERROR] Invalid subcommand '\${1}'"
			usage
			exit 1
		;;
	esac
	
snippet     option
abbr        option
	while [ $# -gt 0 ];
	do
		case \${1} in
			--debug|-d)
				set -x
			;;

			--help|-h)
				usage
				exit 0
			;;

			--version|-v)
				version
				exit 0
			;;

			*)
				echo "[ERROR] Invalid option '\${1}'"
				usage
				exit 1
			;;
		esac
		shift
	done	

snippet     error_func
abbr        error function
options     head
	function err() {
	  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
	}

snippet     for_array
abbr        for array
options     head
    for ${1} in \${${2:array}[@]}
    do
        ${3}
    done

snippet     array_append
abbr        array append
options     word
    ${1:array}=("\${$1[@]}" ${2})

snippet     array_insert_front
abbr        array insert to front
options     word
    ${1:array}=(${2} "\${$1[@]}")

snippet     array_length
abbr        array length
options     word
    ${#array[@]} 

snippet     if_exit_if_error
abbr        exit if error
options     head
    if [ $? -ne 0 ]
    then
        echo oops!
        exit 1
    fi

snippet     if_string_contain
abbr        exit if error
options     head
    if \`echo ${1:string} | grep '${2:match}'\`
    then
		${0}
    fi

snippet     if_file_exist
abbr        if file exist
options     head
    if [ -e ${1:path} ]
    then
		${0}
    fi

snippet     if_is_file
abbr        if path is file
options     head
    if [ -f ${1:path} ]
    then
		${0}
    fi

snippet     if_is_directory
abbr        if path is directory
options     head
    if [ -d ${1:path} ]
    then
		${0}
    fi

snippet     if_variable_empty
abbr        if variable is empty
options     head
	if [ -z \${${1:variable}+x} ]
	then
		${0}
	fi

snippet     return_true
abbr        return true
options     word
	# true
	return 0

snippet     return_false
abbr        return false
options     word
	# false 
	return 1

snippet     comment_function
abbr        comment to function
options     head
	################################################################################
	# ${1:Description}
	# Globals:
	#   ${2:None}
	# Arguments:
	#   ${3:None}
	# Returns:
	#   ${4:None}
	################################################################################

snippet     substitute_with_here_document
abbr        substitute string with here document
options     word
	${1:VARIABLE_NAME}=$(cat << EOS
	${2}
	EOS
	)

snippet     path_to_this_file
abbr        path to this bash file
options     word
    ${1:SCRIPT_DIR}=$(cd $(dirname $0);pwd)${0}

snippet     path_to_parent_ofthis_file
abbr        path to parent of this bash file
options     word
    ${1:PARENT_DIR}=$(cd $(dirname $0);cd ..;pwd)${0}
