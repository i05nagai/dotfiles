include shell_awk.snip
include shell_aws.snip
include shell_date.snip
include shell_find.snip
include shell_git.snip
include bash.snip

#
# echo
#
snippet     echo_no_newline
alias       print_no_newline
abbr        echo without newline
options     head
	printf "%s" ${1}

snippet     echo_variable
alias       print_variable
abbr        echo without newline
options     head
	echo '${1}'"=$1"

#
# for
#
snippet     for_array
abbr        for array
options     head
	for ${1} in \${${2:array}[@]}
	do
		${3}
	done

snippet     for_file_in_directory
abbr        for array
options     head
	for filename in $(find . -name "coverage.dat"); do
		${2}
	done

snippet     for_array_index
abbr        for array
options     head
	for ((i=0;i<${#${1:array_name}[@]};++i)); do
	${$1[i]}
	done

snippet     for_filelist
abbr        for file
options     word
	for filename in $(ls ${1:path} ); do
		${0}
	done

snippet     for_filelist_filtered_by_ext
abbr        for file
options     word
	for filename in $(ls ${1:path} | grep ${2:.txt}$ ); do
		${0}
	done

snippet     for_read_lines
abbr        for file
options     word
	cat ${1:path_or_var} | while read line
	do
		# do something with $line here done
	done

snippet     get_filelist
abbr        get
options     head
	filelist=$(find ${1:path_to_dir} ${2:condition})

snippet     array
abbr        array=()
options     word
	${1:name}=("${2}" "${3}")${0}

snippet     array_append
abbr        array append
options     word
	${1:array}=("\${$1[@]}" ${2})

snippet     array_insert_front
abbr        array insert to front
options     word
	${1:array}=(${2} "\${$1[@]}")

snippet     array_length
abbr        array length
options     word
	${#array[@]} 

#
# if
#
snippet     if_elif
abbr        if then elif then else
options     word
	if [[ ${1} ]]; then
	elif [[ ${2} ]]; then
	fi

snippet     if_exit_if_error
abbr        exit if error
options     head
	if [[ $? -ne 0 ]]; then
		echo oops!
		exit 1
	fi

snippet     if_string_contain
abbr        exit if error
options     head
	if [[ \`echo ${1:string} | grep '${2:match}'\` ]]; then
		${0}
	fi

snippet     if_string_equal
abbr        string equal
options     word
	if [[ "${1:${var}}" = "${2:text}" ]]; then
	  ${0}
	fi

snippet     if_string_empty
abbr        string equal
options     word
	if [[ -z "${1:${var}}" ]]; then
		${0}
	fi

snippet     if_string_not_empty
abbr        string equal
options     word
	if [[ ! -z "${1:${var}}" ]]; then
		${0}
	fi

snippet     if_file_exist
abbr        if file exist
options     head
	if [[ -e ${1:path} ]]; then
		${0}
	fi

snippet     if_file_not_exist
abbr        if file exist
options     head
	if [[ ! -e ${1:path} ]]; then
		${0}
	fi

snippet     if_is_file
abbr        if path is file
options     head
	if [[ -f ${1:path} ]]; then
		${0}
	fi

snippet     if_is_directory
abbr        if path is directory
options     head
	if [[ -d ${1:path} ]]; then
		${0}
	fi

snippet     if_variable_empty
abbr        if variable is empty
options     head
	if [[ -z \${${1:variable}} ]]; then
		${0}
	fi

snippet     if_variable_empty_sh
abbr        if variable is empty
options     head
	if [ -z \${${1:variable}+x} ]; then
		${0}
	fi

snippet     if_variable_not_empty
abbr        if variable is empty
options     head
	if [[ ! -z \${${1:variable}} ]]; then
		${0}
	fi

snippet     if_variable_not_empty_sh
abbr        if variable is empty
options     head
	if [ ! -z \${${1:variable}+x} ]; then
		${0}
	fi

snippet     if_command_exist
abbr        if commands exists
options     word
	# command exists
	if which ${1:command} >/dev/null 2>&1; then
		${0}
	fi

snippet     if_command_failed
abbr        string equal
options     word
	if ! ${1:ls}; then
		${0}
	fi

snippet     if_command_failed
abbr        string equal
options     word
	${1}
	if [[ $? -ne 0 ]]; then
		${2:failed}
	fi

snippet     if_command_output_contain_text
abbr        string equal
options     word
	if ! ${1:ls} | grep ${2:text} --quiet ; then
		${0}
	fi

snippet     if_empty_line
abbr        if commands exists
options     word
	if echo ${line} | grep --quiet '^\s*$' ; then
		${0}
	fi

snippet     if_integer_equal
abbr        if commands exists
options     word
	if [[ ${1} -eq ${2}]]; then
		${0}
	fi

snippet     if_integer_equal_not
abbr        if commands exists
options     word
	if [[ ${1} -ne ${2} ]]; then
		${0}
	fi

snippet     if_integer_greater_than
abbr        if commands exists
options     word
	if [[ ${1} -gt ${2} ]]; then
		${0}
	fi

snippet     if_in_not
abbr        if commands exists
alias       if_variable_not_one_of
options     word
	if [[ ${1:"${VAR}"} != ${2} ]] \
		&& [[ $1 != ${3} ]]; then
		${0}
	fi

#
# return
#
snippet     return_true
abbr        return true
options     word
	# true
	return 0

snippet     return_false
abbr        return false
options     word
	# false 
	return 1

snippet     comment_function
abbr        comment to function
options     head
	################################################################################
	# ${1:Description}
	# Globals:
	#   ${2:None}
	# Arguments:
	#   ${3:None}
	# Returns:
	#   ${4:None}
	################################################################################

snippet     substitute_with_here_document
abbr        substitute string with here document
options     word
	${1:VARIABLE_NAME}=$(cat << EOS
	${2}
	EOS
	)

snippet     path_to_this_file
abbr        path to this bash file
options     word
    ${1:SCRIPT_DIR}=$(cd $(dirname \${0});pwd)${0}

snippet     path_to_this_dir
abbr        path to this dir
options     word
    ${1:SCRIPT_DIR}=$(cd $(dirname \${0});pwd)${0}

snippet     path_to_parent_of_this_file
abbr        path to parent of this bash file
options     word
    ${1:PARENT_DIR}=$(cd $(dirname \${0});cd ..;pwd)${0}

snippet     calculate
abbr        calculate
options     word
	$((${1:1 + 1}))${0}

snippet     wait_until_ip_is_accessible
abbr        wait
options     word
	try_loop=20
	while ! nc -z ${1:${HOST}} ${2:${PORT}} >/dev/null 2>&1 < /dev/null; do
		j=$((j+1))
		if [ $j -ge $try_loop ]; then
			echo "$(date) - $1 still not reachable, giving up"
			exit 1
		fi
			echo "$(date) - waiting ... $j/$try_loop"
		sleep 5
	done

#
# string
#
snippet     string_replace
abbr        string replace with sed
options     word
	echo ${1:string} | sed 's/${2:replacee}/${3:replacer}/'

snippet     string_extract
abbr        string replace with sed
options     word
	${4:extracted}=$(echo 'input_01.txt' | sed 's/input_\(.*\).txt/\1/')

#
#
#
snippet     exec_arguments
abbr        exec args
options     word
	exec "$@"

# var
snippet     constant_declare
abbr        exec args
options     word
	declare -r ${1:var}=${2:123}

snippet     constant
abbr        exec args
options     word
	readonly ${1:NAME}=${2:VALUE}

#
# set
#
snippet     set_error
abbr        exec args
options     word
	set -o errexit # set -e
	set -o pipefail
	set -o nounset

#
# exit
#
snippet     exit_general_error
abbr        exec args
options     word
	exit 1

snippet     exit_command_result
abbr        exec args
options     word
	exit $?

snippet     exit_command_cannot_executed
abbr        exec args
options     word
	exit 126

snippet     exit_command_not_found
abbr        exec args
options     word
	exit 127


#
# template
#
snippet     template_usage
abbr        usage
	usage() {
	  cat <<EOF
	${1:basename} is a tool for ...
	
	Usage:
	    $1 [command] [<options>]
	
	Options:
	    --version, -v     print $1 version
	    --help, -h        print this
	EOF
	}

snippet     template_version
abbr        version
	version() {
		echo "basename${0} version 0.0.1"
	}
	
snippet     template_subcommand
abbr        subcommand
	case \${1} in
		start)
			start
		;;
	
		stop)
			stop
		;;
	
		restart)
			start && stop
		;;
	
		help|--help|-h)
			usage
		;;
	
		version|--version|-v)
			version
		;;
		
		*)
			echo "[ERROR] Invalid subcommand '\${1}'"
			usage
			exit 1
		;;
	esac


snippet     template_option
abbr        option
	while [ $# -gt 0 ];
	do
		case \${1} in
			--debug|-d)
				set -x
			;;
	
			--help|-h)
				usage
				exit 0
			;;
	
			--some-command|-s)
				shift || true  # in case of set -e
				var=$1
			;;
	
			--version|-v)
				version
				exit 0
			;;
	
			*)
				echo "[ERROR] Invalid option '\${1}'"
				usage
				exit 1
			;;
		esac
		shift || true  # in case of set -e
	done

snippet     template_error_func
abbr        error function
options     head
	err() {
		echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')]: $@" >&2
	}

snippet     template_check_command_status
abbr        error function
options     head
	ret=$?
	if [ $ret -ne 0 ]; then
		exit $ret
	fi

