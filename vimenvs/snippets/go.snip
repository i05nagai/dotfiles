include go_math.snip
include go_type.snip

snippet     main
abbr        main
options     word
	package main
	
	import (
		"fmt"
	)
	
	func main() {
		${1}
	}

#
# import
#
snippet     import_multiple
abbr        main
options     word
	import (
		"fmt"
		"math/cmplx"
	)

snippet     import
abbr        main
options     word
	import "${1:fmt}"

#
# fmt
#
snippet     fmt
abbr        main
options     word
	# import "fmt"
	fmt.Printf("${1}")

snippet     fmt_print_variable
alias       print_variable
abbr        main
options     word
	# import "fmt"
	fmt.Printf("${1:variable_name}: %v", ${2})

#
# for
#
delete for
snippet     for
abbr        for
options     word
	for ${1:i} := 0; $1 < ${2}; $1++ {
		${0}
	}

snippet     for_while
abbr        for
options     word
	sum := 1
	for sum < 1000 {
		sum += sum
	}

snippet     for_infinite
abbr        for
options     word
	for {
	}

snippet     for_map
abbr        for
options     word
	for key, value := range ${1:map} {
	}

snippet     for_array_index_elem
abbr        for
options     word
	for i, elem := range ${1:array} {
		${0}
	}

snippet     for_array_elem
abbr        for
options     word
	for _, elem := range ${1:array} {
		${0}
	}

#
# if
#
snippet     if_ok
abbr        main
options     word
	if ${1:ret}, ok := ${2:data}; ok {
	}

snippet     if_os
abbr        switch
options     word
	switch ${1:os := runtime.GOOS}; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.", os)
	}

#
# const
#
snippet     const
abbr        type
options     word
	const ${1:Name = value}

#
# var
#
snippet     var_type
abbr        type
options     word
	var ${1:var_name} ${2:TypeName}${3: = 1}

snippet     var_multiple
abbr        type
options     word
	var (
		${1:var_name} ${2:TypeName}${3: = 1}
	)

snippet     var_without_type
abbr        type
options     word
	${1:var_name} := ${3:value}


#
# func
#
snippet     func
abbr        type
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:ReturnType} {
		return result
	}

snippet     func_return_multiple
abbr        type
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:(ReturnType1, ReturnType2)} {
		return 1
	}

snippet     func_return_named
abbr        type
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:(x ReturnType1, y ReturnType2)} {
		// x := 1
		// y := 2
		return
	}

snippet     func_method
abbr        type
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:ReturnType} {
		return result
	}

#
# map
#

#
# array
#
snippet     array_make_string
abbr        type
options     word
	${1} := []string{
		"a",
	}

snippet     array_make_int32
abbr        type
options     word
	${1} := []int32{
		1,
	}

snippet     array_make
abbr        type
options     word
	${1} := make([]{$2:type}, ${3:length}, ${4:capacity})
