include go_collections.snip
include go_fmt.snip
include go_io.snip
include go_math.snip
include go_os.snip
include go_sort.snip
include go_testing.snip
include go_text_template.snip
include go_type.snip

snippet     main
abbr        main
options     word
	package main
	
	import (
		"fmt"
	)
	
	func main() {
		${1}
	}

#
# import
#
snippet     import_multiple
abbr        main
options     word
	import (
		"fmt"
		"math/cmplx"
	)

snippet     import
abbr        main
options     word
	import "${1:fmt}"

#
# for
#
delete for
snippet     for
abbr        for
options     word
	for ${1:i} := 0; $1 < ${2}; $1++ {
		${0}
	}

snippet     for_while
abbr        for
options     word
	sum := 1
	for sum < 1000 {
		sum += sum
	}

snippet     for_infinite
abbr        for
options     word
	for {
	}

#
# if
#
snippet     if_ok
abbr        main
options     word
	if ${1:ret}, ok := ${2:data}; ok {
	}

snippet     if_os
abbr        switch
options     word
	switch ${1:os := runtime.GOOS}; os {
	case "darwin":
		fmt.Println("OS X.")
	case "linux":
		fmt.Println("Linux.")
	default:
		// freebsd, openbsd,
		// plan9, windows...
		fmt.Printf("%s.", os)
	}

#
# const
#
snippet     const
abbr        type
options     word
	const ${1:Name = value}

#
# var
#
snippet     var_type
abbr        type
options     word
	var ${1:var_name} ${2:TypeName}${3: = 1}

snippet     var_multiple
abbr        type
options     word
	var (
		${1:var_name} ${2:TypeName}${3: = 1}
	)

snippet     var_without_type
abbr        type
options     word
	${1:var_name} := ${3:value}


#
# func
#
snippet     func
abbr        func
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:ReturnType} {
		return result
	}

snippet     func_return_multiple
abbr        func
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:(ReturnType1, ReturnType2)} {
		return 1
	}

snippet     func_return_named
abbr        func
options     word
	func ${1:Funcname}(${2:name Type, name Type}) ${3:(x ReturnType1, y ReturnType2)} {
		// x := 1
		// y := 2
		return
	}

snippet     func_method
abbr        func
options     word
	func (${1:recieverName} ${2:RecieverType}) ${3:Funcname}(${4:name Type, name Type}) ${5:ReturnType} {
		return result
	}

snippet     func_method_pointer
abbr        func
options     word
	func (${1:recieverName} *${2:RecieverType}) ${3:Funcname}(${4:name Type, name Type}) ${5:ReturnType} {
		return result
	}

snippet     func_method_pointer_return_none
abbr        func
options     word
	func (${1:recieverName} *${2:RecieverType}) ${3:Funcname}(${4:name Type, name Type}) {
		return result
	}

snippet     func_method_stringer
abbr        func
options     word
	func (${1:recieverName} ${2:RecieverType}) String() string {
		return ""
	}

#
# interface
#
snippet     interface_def
abbr        interface
options     word
	type ${1:Name} interface {
		${2:MethodName}(${3:val Type}) ${4:ReturnType}
	}

#
# map
#
snippet     map_make_init
abbr        type
options     word
	${1} := map[${2}]${3}{
		${4:key}: ${5:val},
	}

snippet     map_make_init_empty
abbr        type
options     word
	${1} := map[${2}]${3}{}

snippet     map_make
abbr        type
options     word
	${3} := make(map[${1}]${2})

snippet     map_length
abbr        type
options     word
	len(${1:map})

snippet     map_delete
abbr        map delete
options     word
	delete(${1:map}, ${2:key})

snippet     map_if_contain
abbr        map delete
options     word
	if val, ok := ${1:map}[${2:key}]; ok {
		${0}
	}

snippet     map_if_not_contain
abbr        map delete
options     word
	if val, ok := ${1:map}[${2:key}]; !ok {
		${0}
	}

snippet     map_if_has_key
abbr        map delete
options     word
	if _, ok := ${1:map}[${2:key}]; ok {
		${0}
	}

snippet     map_for
abbr        for
options     word
	for key, value := range ${1:map} {
	}

snippet     map_get_keys
abbr        for
options     word
	for key, _ := range ${1:map} {
		
	}

#
# array
#
snippet     array_make_string
abbr        type
options     word
	${1} := []string{
		"a",
	}

snippet     array_make_int32
abbr        type
options     word
	${1} := []int32{
		1,
	}

snippet     array_make_init
abbr        type
options     word
	${1} := []${2:type}{
	}

snippet     array_make
abbr        type
options     word
	${1} := make([]${2:type}, ${3:length}, ${4:capacity})

snippet     array_for_index_elem
abbr        for
options     word
	for i, elem := range ${1:array} {
		${0}
	}

snippet     array_for_elem
abbr        for
options     word
	for _, elem := range ${1:array} {
		${0}
	}

#
# struct
#
snippet     struct_make
abbr        for
options     word
	${1:varName} := ${2:StructName}{
		${3:MemberName: memberValue1}
	}

snippet     struct_make_pointer
abbr        for
options     word
	${1:varName} := &${2:StructName}{
		${3:MemberName: memberValue1}
	}

#
# error
#
snippet     error_panic
abbr        for
options     word
	if err != nil {
		panic(err)
	}
