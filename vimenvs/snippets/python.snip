include python_argparse.snip
include python_beautifulsoup.snip
include python_boto3.snip
include python_click.snip
include python_csv.snip
include python_faker.snip
include python_flask.snip
include python_google_cloud_bigquery.snip
include python_google_cloud_storage.snip
include python_gspread.snip
include python_holoviews.snip
include python_keras.snip
include python_logging.snip
include python_matplotlib.snip
include python_mecab.snip
include python_mock.snip
include python_multiprocessing.snip
include python_numpy.snip
include python_pandas.snip
include python_path.snip
include python_pillow.snip
include python_pyspark.snip
include python_pystache.snip
include python_pytest.snip
include python_requests.snip
include python_scikit_image.snip
include python_sqlalchemy.snip
include python_subprocess.snip
include python_typing.snip
include python_urllib.snip
include sphinx.snip

snippet     debug
abbr        import pdb;
options     word
   import pdb; pdb.set_trace() 

snippet     debug_pudb
abbr        from pudb import set_trace; set_trace()
options     word
    from pudb import set_trace; set_trace()

snippet     debug_ipdb
abbr        from ipdb import set_trace; set_trace()
options     word
    import ipdb; ipdb.set_trace()

snippet shebang
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

snippet shebang3
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

snippet import
    import ${0:module}

snippet unicode
    def __unicode__(self):
        ${0:representation}

snippet import_from
    from ${1:package} import ${0:module}

# Module Docstring
snippet docs_module
    """
    File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
    Author: `g:snips_author`
    Email: `g:snips_email`
    Github: `g:snips_github`
    Description: ${0}
    """

snippet while
    while ${1:condition}:
        ${0}

snippet do_while
    while True:
        ${1}
        if ${0:condition}:
            break

snippet with
    with ${1:expr} as ${2:var}:
        ${0}

delete with_open
snippet with_open
    try:
        with open(${1:filename}, '${2:rwb}') as ${3:f}:
            ${4:pass}
    except IOError as e:
        print(e)

snippet with_open_newline
    try:
        with open(${1:filename}, '${2:rwb}', newline='\n') as ${3:f}:
            ${4:pass}
    except IOError as e:
        print(e)

snippet     print_to_file
abbr        print to file
options     word
    def print_to_file(filename, data):
        """print_to_file

        :param filename: 
        :param data:
        """
        with open(filename, "w") as f:
            string = json.dumps(data, indent=4, sort_keys=True)
            f.write(string)

# New Class
snippet cl
    class ${1:ClassName}(${2:object}):
        """${3:docstring for $1}"""
        def __init__(self, ${4:arg}):
            ${5:super($1, self).__init__()}
            self.$4 = $4
            ${0}

# New Function
snippet def
    def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
        ${0}

# New Method
snippet def_method
    def ${1:mname}(self, ${2:arg}):
        ${0}

# New Property
snippet def_property
    def ${1:foo}():
        doc = "${2:The $1 property.}"
        def fget(self):
            ${3:return self._$1}
        def fset(self, value):
            ${4:self._$1 = value}
        def fdel(self):
            ${0:del self._$1}
        return locals()
    $1 = property(**$1())

# Ifs
snippet if
    if ${1:condition}:
        ${0}
snippet else
    else:
        ${0}

snippet elif
    elif ${1:condition}:
        ${0}

# For
snippet for
    for ${1:item} in ${2:items}:
        ${0}

# Encodes
snippet utf8
    # -*- coding: utf-8 -*-

snippet try_except
    try:
        ${1}
    except ${2:Exception}, ${3:e}:
        ${0:raise $3}

snippet try_except_else
    try:
        ${1}
    except ${2:Exception}, ${3:e}:
        ${4:raise $3}
    else:
        ${0}

snippet try_except_finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	finally:
		${0}

snippet try_except_else_finally
	try:
		${1}
	except ${2:Exception}, ${3:e}:
		${4:raise $3}
	else:
		${5}
	finally:
		${0}

# if __name__ == '__main__':
snippet main
	def main():
		pass


	if __name__ == '__main__':
		${0:main()}

snippet """
    """${0:doc}
    """

snippet     future
abbr        future
options     head
    from __future__ import absolute_import
    from __future__ import division
    from __future__ import print_function
    from __future__ import unicode_literals

# re
snippet     match_with_group
abbr        re.match
options     word
    match_object = re.match(${1:pattern}, ${2:text})
    if match_object:
        ${3:match_object.group(1)}${0}

snippet     re_replace
abbr        re.sub
options     word
    ${1:replaced} = re.sub(r'${2:replacee}', '${3:replacer}', ${4:text})

snippet     sleep
abbr        sleep
options     word
	# import time
	time.sleep(${1:sec})

snippet     time_start
abbr        sleep
options     word
	import time
	time.sleep(${1:sec})

snippet     time_end
abbr        sleep
options     word
	elapsed_time = time.time() - start
	print("elapsed_time:{0} [sec]".format(elapsed_time))

# date
snippet     datetime_from_string_to_datetime
abbr        datetime_from_string_to_datetime
options     head
    # https://docs.python.org/2.7/library/datetime.html#strftime-and-strptime-behavior
    ${2:date} = datetime.datetime.strptime(${1:date_string}, "%Y-%m-%d %H:%M:%S")

snippet     datetime_from_datetime_to_string
abbr        datetime_from_datetime_to_string
options     head
    # https://docs.python.org/2.7/library/datetime.html#strftime-and-strptime-behavior
    ${2:date_string} = ${1:date}.strftime('%Y/%m/%d')

snippet     datetime_now
abbr        date now
options     head
    datetime.datetime.now()

snippet     datetime_to_date
abbr        datetime to date
options     word
    ${1:datetime_var}.date()${0}

snippet     datetime_from_unixtime_to_datetime
abbr        datetime to date
options     word
    datetime.datetime.fromtimestamp(${1:unixtime})${0}

snippet     datetime_to_unixtime
abbr        datetime to date
options     word
    int(time.mktime(${1:datetime_var}.timetuple()))${0}

snippet     date_now
abbr        date now
options     head
    datetime.datetime.now().date()

snippet     date_to_datetime
abbr        date to datetime
options     word
    ${3:datetime_var} = datetime.datetime.combine(
        ${1:date_var},
        datetime.time().replace(tzinfo=${2:pytz.utc})
    )

snippet     datetime_from_datetime_to_unixtime
abbr        datetime to unixtime
options     word
    # import time
    int(time.mktime(${1:datetime}.timetuple()))

# pprint
snippet     pretty_print_dict
abbr        pretty printer
options     word
    import pprint
    pprint.pprint(${2:dict})${0}

# print
snippet     print_variable
abbr        print variable
options     word
    print('${1}: {0}'.format($1))

# json
snippet     json_pretty_print
abbr        json pretty print
options     word
    json.dumps(${1}, indent=2, sort_keys=True)${0}

snippet     json_read_from_file
abbr        json read from file
options     word
    with open('${1:path}', 'r') as f:
        json.load(${2:f})${0}

snippet     json_string_to_dict
abbr        json read from file
options     word
    json.loads(${1:string})${0}

snippet     json_write_to_file_pretty_print
abbr        json write to file pretty print
options     word
    with open('${1:path}', 'w') as f:
        json.dump(${2:json_dict}, f, indent=2, sort_keys=True)${0}


snippet     argument_sys
abbr        sys.argv
options     word
    # sys.argv[0] is name of scripts
    sys.argv[1]

snippet commandline_argument
    try:
        # Short option syntax: "hv:"
        # Long option syntax: "help" or "verbose="
        opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

    except getopt.GetoptError, err:
        # Print debug info
        print str(err)
        ${3:error_action}

    for option, argument in opts:
        if option in ("-h", "--help"):
            ${0}
        elif option in ("-v", "--verbose"):
            verbose = argument

snippet     environment_variable_get
abbr        environment variable
options     head
	import os
	${2:get_var} = os.environ["${1:var_name}"]

snippet     environment_variable_set
abbr        environment variable
options     head
	import os
	os.environ["${1:var_name}"] = ${2:set_var}

snippet     set_add_element
abbr        set add set
options     word
	${1:set_var}.add(${1:list or array}

snippet     set_add_set
abbr        set add set
options     word
	${1:set_var} |= ${2:set_var2}

snippet     make_directory_if_not_exists
abbr        make directory
options     head
    # import os
    # import errno
    try:
        os.makedirs(${1:path_to_directory})
    except OSError as e:
        if e.errno != errno.EEXIST:
            raise${0}

# list
snippet     list_copy
abbr        list copy
options     word
    ${1:var} = ${2:list}[:]

# sort
snippet     sort_list_of_dict_by_elem
abbr        sort list of dict
options     head
	sorted(${1:list}, key=${2:lambda x: x['key']})${0}

snippet     sort_list_of_tuple_by_val
abbr        sort list of dict
options     head
	sorted(${1:list}, key=${2:lambda x: x[0]})${0}

snippet     sort_dict_by_value
abbr        sort list of dict
options     head
	sorted(${1:x}.items(), key=operator.itemgetter(1))${0}

snippet     sort_dict_by_key
abbr        sort list of dict
options     head
	sorted(${1:x}.items(), key=operator.itemgetter(0))${0}

# abs class
snippet     abc_class
abbr        abs class
options     head
	class ${1:class_name}(object):
	
		__metaclass__ = abc.ABCMeta
	
		def __init__(self):
			pass
	
		@abc.abstractmethod
		def ${2:method}(self${3:, attr}):
			raise NotImplemented()

snippet     abc_method
abbr        abs mehod
options     head
        @abc.abstractmethod
        def ${1:method}(self${2:, attr}):
            raise NotImplemented()

snippet     sqlite_connect
abbr        connect
options     word
    conn = sqlite3.connect(${1:path_to_db})

snippet     sqlite_execute
abbr        connect
options     word
    cursor = conn.cursor()
    for row in cursor.execute(${1:query}):
        ${2}

snippet     log_set_output_file
abbr        logging set output file
options     word
    logging.basicConfig(filename=${1:'example.log'}, level=logging.DEBUG)

snippet     func_name
abbr        get function name
options     word
    ${1:function}.__name__

#
snippet     bytestring_to_str
abbr        get function name
options     word
	${1:var}.decode('${2:utf-8}')

snippet     str_to_bytestring
abbr        get function name
options     word
	${1:var}.encode('${2:utf-8}')

snippet     decorator
abbr        get function name
options     word
	def ${1:recurse}(${2:variable}):
		"""Function decorator
		
		:return: function
		"""
		def wrap(f):
			def wrapped_f(tlist):
				f(tlist)
		
			return wrapped_f
		
		return wrap

snippet     if_is_list
abbr        if is list
options     word
	if isinstance(${1:var}, list):
		${1}

snippet     download_file
abbr        download_file
options     word
	try:
		import urllib.request as request
	except Exception:
		import urllib2 as request
	
	
	def retrieve_file(url):
		response = request.urlopen(url)
		return response.read().decode('utf-8')
	
	
	def download_file(url, filename):
		request.urlretrieve(url, filename)

snippet     module_this
abbr        this module
options     word
	this_module = sys.modules[__name__]

snippet     random_hash_uuid
abbr        uuid
options     word
	import uuid
	uuid.uuid4()

snippet     random_hash_bits
abbr        uuid
options     word
	import random
	hashcode = random.getrandbits(128)
	hex(hashcode)[2:-1]
