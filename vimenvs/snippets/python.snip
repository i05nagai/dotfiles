include sphinx.snip
include python_pytest.snip
include python_matplotlib.snip

snippet     debug
abbr        import pdb;
options     word
   import pdb; pdb.set_trace() 

snippet     debug_pudb
abbr        from pudb import set_trace; set_trace()
options     word
    from pudb import set_trace; set_trace()

snippet shebang
    #!/usr/bin/env python
    # -*- coding: utf-8 -*-

snippet shebang3
    #!/usr/bin/env python3
    # -*- coding: utf-8 -*-

snippet import
    import ${0:module}

snippet unicode
    def __unicode__(self):
        ${0:representation}

snippet import_from
    from ${1:package} import ${0:module}

# Module Docstring
snippet docs_module
    """
    File: ${1:`vim_snippets#Filename('$1.py', 'foo.py')`}
    Author: `g:snips_author`
    Email: `g:snips_email`
    Github: `g:snips_github`
    Description: ${0}
    """

snippet while
    while ${1:condition}:
        ${0}

snippet do_while
    while True:
        ${1}
        if ${0:condition}:
            break

snippet with
    with ${1:expr} as ${2:var}:
        ${0}

# New Class
snippet cl
    class ${1:ClassName}(${2:object}):
        """${3:docstring for $1}"""
        def __init__(self, ${4:arg}):
            ${5:super($1, self).__init__()}
            self.$4 = $4
            ${0}

# New Function
snippet def
    def ${1:fname}(${2:`indent('.') ? 'self' : ''`}):
        ${0}

# New Method
snippet def_method
    def ${1:mname}(self, ${2:arg}):
        ${0}

# New Property
snippet def_property
    def ${1:foo}():
        doc = "${2:The $1 property.}"
        def fget(self):
            ${3:return self._$1}
        def fset(self, value):
            ${4:self._$1 = value}
        def fdel(self):
            ${0:del self._$1}
        return locals()
    $1 = property(**$1())

# Ifs
snippet if
    if ${1:condition}:
        ${0}
snippet else
    else:
        ${0}

snippet elif
    elif ${1:condition}:
        ${0}

# For
snippet for
    for ${1:item} in ${2:items}:
        ${0}

# Encodes
snippet utf8
    # -*- coding: utf-8 -*-

snippet try_except
    try:
        ${1}
    except ${2:Exception}, ${3:e}:
        ${0:raise $3}

snippet try_except_else
    try:
        ${1}
    except ${2:Exception}, ${3:e}:
        ${4:raise $3}
    else:
        ${0}

snippet try_except_finally
    try:
        ${1}
    except ${2:Exception}, ${3:e}:
        ${4:raise $3}
    finally:
        ${0}

snippet try_except_else_finally
    try:
        ${1}
    except ${2:Exception}, ${3:e}:
        ${4:raise $3}
    else:
        ${5}
    finally:
        ${0}

# if __name__ == '__main__':
snippet main
    if __name__ == '__main__':
        ${0:main()}

snippet """
    """${0:doc}
    """

snippet commandline_argument
    try:
        # Short option syntax: "hv:"
        # Long option syntax: "help" or "verbose="
        opts, args = getopt.getopt(sys.argv[1:], "${1:short_options}", [${2:long_options}])

    except getopt.GetoptError, err:
        # Print debug info
        print str(err)
        ${3:error_action}

    for option, argument in opts:
        if option in ("-h", "--help"):
            ${0}
        elif option in ("-v", "--verbose"):
            verbose = argument

snippet log
    import logging
    logger = logging.getLogger(${0:__name__})

snippet log_error
    logger.error(${0:msg})

snippet log_debug
    logger.debug(${0:msg})

snippet log_warning
    logger.warning(${0:msg})

snippet log_critical
    logger.critical(${0:msg})

snippet log_info
    logger.info(${0:msg})

snippet     future
abbr        future
options     head
    from __future__ import division
    from __future__ import print_function
    from __future__ import absolute_import

## re
snippet     match_with_group
abbr        re.match
options     word
    match_object = re.match(${1:pattern}, ${2:text})
    if match_object:
        ${3:match_object.group(1)}${0}

    
## csv
snippet     csv_write
abbr        csv_write
options     head
    with open("${1:filename}", "w") as f:
        writer = csv.writer(f, lineterminator='\n')
        writer.writerow(list)
        writer.writerows(array2d)

snippet     csv_read
abbr        csv_read
options     head
    with open("${1:filename}", "r") as f:
        reader = csv.reader(f)
        # skip header
        header = next(reader)
        for row in reader:
            row
