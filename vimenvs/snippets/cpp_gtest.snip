snippet     gtest_include
abbr        #include <gtest/gtest.h>
options     head
	#include <gtest/gtest.h>

snippet     gtest_main
abbr        gtest main
options     head
	#include "pre_compiled_header.h"
	#include <gtest/gtest.h>

	int main(int argc, char **argv)
	{
		::testing::InitGoogleTest(&argc, argv);

		return RUN_ALL_TESTS();
	}

snippet     gtest_header
abbr        namespace test interface header
options     head
	#pragma once
	#include <gtest/gtest.h>	
	namespace ${1:namespace} {
		class ${2:`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`} : public ::testing::Test {
		protected:
			//set-up
			$2();
			//clean-up does not throw exceptions
			virtual ~$2();
			//called before every test immediately after constructor
			virtual void SetUp();
			//called after every test before destructor
			virtual void TearDown();
			
			//target::Target _target;
		}; // class $2 : public ::testing::Test {
	} // namespace $1

snippet     gtest_header2
abbr        namespace test interface header
options     head
	#pragma once
	#include <gtest/gtest.h>	
	namespace ${1:namespace} { namespace ${2:namespace} {
		class ${3:`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`} : public ::testing::Test {
		protected:
			//set-up
			$3();
			//clean-up does not throw exceptions
			virtual ~$3();
			//called before every test immediately after constructor
			virtual void SetUp();
			//called after every test before destructor
			virtual void TearDown();
			
			//target::Target _target;
		}; // class $3 : public ::testing::Test {
	} } // namespace $1 { namespace $2 {

snippet     gtest_source
abbr        namespace test interface header
options     head
	#include "${1:target}/pre_compiled_header.h"
	#include "${2:path/to/test}/${3:`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`}.h"
	
	namespace ${4:namespace} {
		$3::$3() 
	    {
		}

		$3::~$3() 
		{
	    }

		void $3::SetUp()
		{
	    }

		void $3::TearDown()
		{
	    }

		TEST_F($4, ${5:TestName})
		{
			${0:TARGET}
		}
	} // namespace $4

snippet     gtest_source2
abbr        gtest source2
options     head
	#include "${1:target}/pre_compiled_header.h"
	#include "${2:path/to/test}/${3:`bufname('%') ==#'[Command Line]' ? expand('#:t:r:r:r') : expand('%:t:r:r:r')`}.h"
	
	namespace ${4:namespace} { namespace ${5:namespace} {
		$3::$3() 
	    {
		}
		
		$3::~$3() 
		{
	    }

		void $3::SetUp()
		{
	    }
		
		void $3::TearDown()
		{
	    }

		TEST_F($3, ${6:TestName})
		{
			${0:TARGET}
		}
	} } // namespace $4 { namespace $5 {

snippet gtest_fixture
abbr    TEST_F
	TEST_F(${1:test class}, ${2:test name})
	{
	    ${0}
	}

snippet gtest_test
abbr    TEST
	TEST(${1:test_case_name}, ${2:test_name})
	{
	    ${0}
	}

###############################################################################
# Assert
###############################################################################
snippet     gtest_assert_true
abbr        ASSERT_TRUE
options     word
	ASSERT_TRUE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_false
abbr        ASSERT_FALSE
options     word
	ASSERT_FALSE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_equal
abbr        ASSERT_EQ
options     word
	ASSERT_EQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_not_equal
abbr        ASSERT_NE
options     word
	ASSERT_NE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_less_than
abbr        ASSERT_LT
options     word
	ASSERT_LT(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_less_than_equal
abbr        ASSERT_LE
options     word
	ASSERT_LE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_greather_than
abbr        ASSERT_GT
options     word
	ASSERT_GT(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_greather_than_equal
abbr        ASSERT_GE
options     word
	ASSERT_GE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_death
abbr        ASSERT_DEATH
options     word
	ASSERT_DEATH(${1:statement}, ${2:error_regex});${0}

###############################################################################
# Expect
###############################################################################
snippet     gtest_expect_true
abbr        EXPECT_TRUE
options     word
	EXPECT_TRUE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_false
abbr        EXPECT_FALSE
options     word
	EXPECT_FALSE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_equal
abbr        EXPECT_EQ
options     word
	EXPECT_EQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_not_equal
abbr        EXPECT_NE
options     word
	EXPECT_NE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_less_than
abbr        EXPECT_LT
options     word
	EXPECT_LT(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_less_than_equal
abbr        EXPECT_LE
options     word
	EXPECT_LE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_greather_than
abbr        EXPECT_GT
options     word
	EXPECT_GT(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_greather_than_equal
abbr        EXPECT_GE
options     word
	EXPECT_GE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_death
abbr        ASSERT_DEATH
options     word
	EXPECT_DEATH(${1:statement}, ${2:error_regex});${0}

###############################################################################
# Assert string
###############################################################################
snippet     gtest_assert_str_equal
abbr        ASSERT_STREQ
options     word
	ASSERT_STREQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_str_not_equal
abbr        ASSERT_STRNE
options     word
	ASSERT_STRNE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_str_equal_ignore_case
abbr        ASSERT_STRCASEEQ
options     word
	ASSERT_STRCASEEQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_str_not_equal_ignore_case
abbr        ASSERT_STRCASENE
options     word
	ASSERT_STRCASENE(${1:expected}, ${2:actual});
	${0}
	
###############################################################################
# Expect string
###############################################################################
snippet     gtest_expect_str_equal
abbr        EXPECT_STREQ
options     word
	EXPECT_STREQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_str_not_equal
abbr        EXPECT_STRNE
options     word
	EXPECT_STRNE(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_str_equal_ignore_case
abbr        EXPECT_STRCASEEQ
options     word
	EXPECT_STRCASEEQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_str_not_equal_ignore_case
abbr        EXPECT_STRCASENE
options     word
	EXPECT_STRCASENE(${1:expected}, ${2:actual});
	${0}

###############################################################################
# Assert double
###############################################################################
snippet     gtest_assert_float_equal
abbr        ASSERT_FLOAT_EQ
options     word
	ASSERT_FLOAT_EQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_double_equal
abbr        ASSERT_DOUBLE_EQ
options     word
	ASSERT_DOUBLE_EQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_assert_near
abbr        ASSERT_NEAR
options     word
	ASSERT_NEAR(${1:val1}, ${2:val2}, ${3:abs_error});
	${0}

snippet     gtest_expect_float_equal
abbr        EXPECT_FLOAT_EQ
options     word
	EXPECT_FLOAT_EQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_double_equal
abbr        EXPECT_DOUBLE_EQ
options     word
	EXPECT_DOUBLE_EQ(${1:expected}, ${2:actual});
	${0}

snippet     gtest_expect_near
abbr        EXPECT_NEAR
options     word
	EXPECT_NEAR(${1:val1}, ${2:val2}, ${3:abs_error});
	${0}

snippet     gtest_template_test
abbr        template test
options     word
	template<typename T>
	class TypedTest : public testing::Test {};
	typedef ::testing::Types<${1:type1}> ${2:test_func}TestTypes;
	TYPED_TEST_CASE(TypedTest , $2TestTypes);
	TYPED_TEST(TypedTest, ${3:test_name})
	{
		// TypeParam refers the one of test type
	}
