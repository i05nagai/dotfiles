include scala_class.snip
include scala_scalatest.snip
include scala_collection.snip
include scala_package.snip
include scala_reflect.snip
include scala_seq.snip
include scala_trait.snip

#
# lambda expression
#
snippet     func_anonymous
abbr        func
options     word
	(${1:x: Type}) => ${2:x*x}

snippet     func_def_oneline
abbr        func
options     word
	def ${1:f}(${2:x: Int}) = { ${3:x*x} }

snippet     func_def
abbr        func
options     word
	def ${1:f}(${2:x: Int}): ${3:ReturnType} = {
		${3:x*x}
	}

snippet     func_package
abbr        func
options     word
	package object ${1:yourpackage} {
		def function(x: Int) = x*x
	}

#
# variable
#
snippet     variable_const
abbr        variable
options     word
	val ${2:name: Type} = ${2:5}

snippet     variable
abbr        variable
options     word
	var ${2:name: Type} = ${2:5}

#
# print
#
snippet     print
abbr        print
options     word
	println("${1:%d}".format(${2}))

#
# for
#
snippet     for_from_to_index
abbr        for
options     word
	for (i <- ${1:1} to ${2:5}) {
		println(i)
	}



#
# tuple
#
snippet     tuple_val
abbr        tuple
options     word
	val ${1:name} = (${2:1, "a"})

snippet     tuple_ref
abbr        tuple
options     word
	${1:tuple}._1

#
# type
#
snippet     type_byte
abbr        type
options     word
	Byte

snippet     type_short
abbr        type
options     word
	Short

snippet     type_double
abbr        type
options     word
	Double

snippet     type_boolean
abbr        type
options     word
	Boolean


#
# implicit
#
snippet     implicit_conversion_equal
abbr        func
options     word
	implicit def ${1:methodName}(${2:x: Int}) = ${3}

snippet     implicit_conversion
abbr        func
options     word
	implicit def ${1:methodName}(${2:x: Int}) {
	}

#
# lambda
#
snippet     lambda
abbr        lambda
options     word
	val ${1:val_name} = (${2:x: Int}) => {
	}

#
# method
# 
snippet     method_repeated_param
abbr        method
options     word
	def ${1:val_name}(${2:xs: Int*}) {
	}

#
# object
#
snippet     object_template
abbr        object
options     word
	object ${1:Name} {
		// require(n > 1)
		val a: Int = n
		private val b: Int = d
		// auxiliary constructor
		def this(n: Int) = this(n, 1)
		def add(n: Int) {
		}
	}

#
# pattern match
#
snippet     pattern_match
abbr        object
options     word
	${1:selector} match {
		case ${1:BinOp(op, left, right)} => ${2:do}
		case _ => ${3:}
	}

snippet     pattern_match_case_sequence
abbr        object
options     word
	case ${1:List(0, _*)} => ${2:do}

snippet     pattern_match_case_tuple
abbr        object
options     word
	case ${1:(a, b, c)} => ${2:do}

snippet     pattern_match_case_typed_pattern
abbr        object
options     word
	case ${1:s: String} => ${2:s.length}
	case ${3:m: Map[_, _]} => ${4:m.size}
	case _ => -1

snippet     pattern_match_case_default
abbr        object
options     word
	case _ => ${1}

#
# tempalte
#
snippet     template_main_method
abbr        template
options     word
	def main(args: Array[String]) {
	
	}

snippet     template_main
abbr        template
options     word
	object ${1:Name} {
		def main(args: Array[String]) {
		
		}
	}
