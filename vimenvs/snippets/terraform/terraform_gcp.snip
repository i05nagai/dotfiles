snippet     terraform_gcp_disk
abbr        variable list
options     word
	resource "google_compute_disk" "${1:resource_name}" {
		name  = "${2:disk-name}"
		type  = "pd-standard"
		zone  = "asia-northeast1-a"
		# GB
		size  = "${5:10}"
		labels {
			${3:key} = "${4:value}"
		}
	}

snippet     terraform_gcp_storage
abbr        variable list
options     word
	resource "google_storage_bucket" "${1:resource_name}" {
		name     = "${2:image-store-bucket}"
		location = "US"
		lables {
			key = value
		}
	}

#
# SQL
#
snippet     terraform_gcp_sql_instance_second_generation
abbr        instance
options     word
	resource "google_sql_database_instance" "master" {
		name = "master-instance"
		database_version = "MYSQL_5_7"
		region = "us-central1"
	
		settings {
			# Second-generation instance tiers are based on the machine
			# type. See argument reference below.
			tier = "db-f1-micro"
		}
	}

snippet     terraform_gcp_sql_database
abbr        database
options     word
	resource "google_sql_database" "users" {
		name      = "users-db"
		instance  = "${google_sql_database_instance.master.name}"
		charset   = "latin1"
		collation = "latin1_swedish_ci"
	}

snippet     terraform_gcp_sql_user
abbr        user
options     word
	resource "google_sql_user" "users" {
		name     = "me"
		instance = "${google_sql_database_instance.master.name}"
		# https://www.terraform.io/docs/providers/google/r/sql_user.html#host
		# Document in say that
		# you don't set this field for second generation.
		# However, there is no such restriction in API document of Cloud SQL.
		# https://cloud.google.com/sql/docs/mysql/admin-api/v1beta4/users
		# Moreover, there is no alternative way to set "host" value.
		# Thus, the document probably wrong
		host     = "me.com"
		password = "changeme"
	}

#
# gke
#
snippet     terraform_gke
abbr        user
options     word
	resource "google_container_cluster" "default" {
	  name = "${local.common["prefix"]}default"
	  zone = "${local.gcp["gcp.zone"]}"
	
	  min_master_version = "1.11.6-gke.2"
	  node_version       = "1.11.6-gke.2"
	
	  master_auth {
		username = "${var.gcp["gke.cluster.master.auth.username"]}"
		password = "${var.gcp["gke.cluster.master.auth.password"]}"
	  }
	
	  node_pool = {
		name       = "${local.common["prefix"]}node-pool-lpc"
		node_count = 1
	
		autoscaling {
		  min_node_count = 1
		  max_node_count = 4
		}
	
		management {
		  auto_repair  = true
		  auto_upgrade = false
		}
	
		node_config {
		  oauth_scopes = "${local.gcp_list["gke.cluster.oauth_scopes"]}"
	
		  labels {
			name  = "${local.common["prefix"]}node-pool-lpc"
		  }
	
		  disk_size_gb = 200
		  machine_type = "n1-standard-1"
	
		  tags = "${var.gcp_list["gke.cluster.node.tags"]}"
		}
	  }
	
	  network           = "${google_compute_network.default.name}"
	  subnetwork        = "${module.gcp_network_default.subnetworks[0]}"
	  cluster_ipv4_cidr = "${var.gcp["network.cluster.cidr.ipv4"]}"
	
	  network_policy {
		# enabled = true
	  }
	
	  addons_config {
		http_load_balancing {
		  disabled = false
		}
	
		kubernetes_dashboard {
		  disabled = false
		}
	  }
	
	  lifecycle {
		ignore_changes = [
		  "node_pool",
		  "master_auth.0.client_certificate",
		  "master_auth.0.client_key",
		  "master_auth.0.cluster_ca_certificate",
		  "master_auth.0.password",
		]
	  }
	}
