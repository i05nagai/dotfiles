include terraform_aws.snip
include terraform_gcp.snip
include terraform_provisioner.snip
include terraform_resource.snip
include terraform_backend.snip

snippet     terraform_merge_map
abbr        terraform
options     word
	"${merge(${local.common_map["label"]},
		map(
		"disk", "owner"
		)
	)}"
#
# variables
#
snippet     terraform_var_workspace
abbr        terraform
options     word
	${terraform.workspace}

snippet     terraform_var_get
abbr        terraform
options     word
	${var.${1:var_name}}

snippet     terraform_var_get_map
abbr        terraform
options     word
	"${lookup(var.${1:var_name}, ${2:key})}"

snippet     terraform_var_get_by_environment
abbr        terraform
options     word
	"${lookup(var.${1:varname}, "${terraform.workspace}.${2:key}", var.$1["default.$2"])}"

snippet     terraform_var_map
abbr        a
options     word
	variable "${1:var_name}" {
		type = "map"
		description = "${3:description}"
		default = {
			${1:key} = ${2:val}
		}
	}

snippet     terraform_var_list
abbr        variable list
options     word
	variable "${1:var_name}" {
		type = "list"
		description = "${3:description}"
		default = [
			${2:key} = ${3:val},
		]
	}

#
# string
#
snippet     terraform_var_string
abbr        variable list
options     word
	variable "${1:var_name}" {
		type = "string"
		description = "${3:description}"
		default = "${2:key}"
	}

snippet     terraform_var_string_multi_line
abbr        variable list
options     word
	variable "${1:var_name}" {
		type = "string"
		description = "${3:description}"
		default = <<EOF
	${2:text}
	EOF
	}

snippet     terraform_var_string_concat
abbr        variable list
options     word
	"${format("%s-%s", ${1:var.a["1"]}, ${2:var.b})}"

#
# locals
#
snippet     terraform_locals
abbr        locals
options     word
	locals {
		"${1:var_name}" = "${2:value}"
		"${3:var_name}" = ["${4:value}"]
		"${5:var_name}" = {
			"${6:key}" = "${7:val}"
		}
	}

snippet     terraform_locals_get
abbr        locals
options     word
	${local.${1:local_name}}

#
# output
#
snippet     terraform_output
abbr        variable list
options     word
	output "${1:output_name}" {
		value = "${1:value}"
	}

#
# module
#
snippet     terraform_module_use
abbr        variable list
options     word
	module "${1:resource_name}" {
		source = "${2:path_to_module}"
	
		# iniput
		var_name = {
		}
	}

#
# if
#
snippet     terraform_if
abbr        variable list
options     word
	"${${1:condition} ? ${2:true} : ${3:false}}"

snippet     terraform_if_add_suffix
abbr        variable list
options     word
	name_prefix = "${var.name_prefix}${var.name_prefix == "" ? "" : "-"}"

snippet     terraform_if_data_template
abbr        variable list
options     word
	data "template_file" "data1" {
		count = "${var.flag}"
		template = <<-EOF
			EOF
	}
	data "template_file" "data2" {
		count = "${1 - var.flag}"
		template = <<-EOF
			EOF
	}
	# if var.use_shell_script_user_data = true => user_data_cloud = empty
	# if var.use_shell_script_user_data = false => user_data_shell = etpty
	resource "${1:resource_name}" "${2:resource_id}" {
		data = "${element(concat(data.template_file.data1.*.rendered, data.template_file.data2.*.rendered), 0)}"
	}

#
# template
#
snippet     terraform_template
abbr        variable list
options     word
	data "template_file" "resource_name" {
		# refer to the output with ${data.template_file.d.rendred}
		template = "$${variable}"
		vars {
			variable = "value"
		}
	}

snippet     terraform_template_from_file
abbr        variable list
options     word
	data "template_file" "resource_name" {
		# refer to the output with ${data.template_file.d.rendred}
		template = "${file("${path.module}/init.tpl")}"
		# variables evaluated when file is loaded
		vars {
			variable = "value"
		}
	}

snippet     terraform_template_count
abbr        variable list
options     word
	data "template_file" "resource_name" {
		# refer as ${data.template_file.web_init.*.rendered[count.index]}
		count = 1
		template = "${file("${path.module}/init.tpl")}"
		# variables evaluated when file is loaded
		vars {
			variable = "value"
		}
	}

#
# map
#
snippet     terraform_map_merge
abbr        variable list
options     word
	merge(map1, map2)

snippet     terraform_zip
abbr        variable list
options     word
	zipmap(list_of_key, list_of_values)

snippet     terraform_map_values
abbr        variable list
options     word
	values(map)

snippet     terraform_map_keys
abbr        variable list
options     word
	keys(map)

snippet     terraform_map_make
abbr        variable list
options     word
	map(key, value, key, value)

#
# list
#
snippet     terraform_list_concat
abbr        concat to single list
options     word
	concat(list1, list2)

#
# path
#
snippet     terraform_path_module
abbr        terraform path
options     word
	${path.module}

snippet     terraform_path_cwd
abbr        terraform path
options     word
	${path.cwd}

snippet     terraform_path_root
abbr        terraform path
options     word
	${path.root}

#
# local file
#
snippet     terraform_list_concat
abbr        concat to single list
options     word
	resource "local_file" "spinnaker_master_key" {
		content     = "${google_service_account_key.spinnaker_master_key.public_key}"
		filename    = "${path.module}/spinnaker-master-key.json"
	}

#
# resource
#
snippet     terraform_random_string
abbr        terraform
options     word
	# you can get ${random_string.password.result}
	resource "random_string" "password" {
		length = 16
		# without special
		# you can override special
		# override_special = "/@\" "
		special = false
		# include upper case
		upper = true
		# include lower case
		lower = true
	}
