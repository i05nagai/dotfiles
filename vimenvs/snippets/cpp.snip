include c.snip

delete template
snippet template
alias   temp
    template <typename ${1}>${0}

delete inc
snippet inc
alias   #inc, #include
    #include <${1}>${0}

# #include "..."
snippet inc2
alias   #inc2, #include2
    #include "${1}"${0}

delete      namespace2
snippet     namespace2
abbr        namespace { namespace { } }
options     head
    namespace ${1:#:name} { namespace ${2:name} {
        ${0:TARGET}
    } } // namespace $1 { namespace $2 {

delete      namespace3
snippet     namespacae3
abbr        namespace { namespace { namespace { } } }
options     head
    namespace ${1:#:name} { namespace ${2:name} { namespace ${3:name} {
        ${0:TARGET}
    } } } // namespace $1 { namespace $2 { namespace $3 {

snippet     ifndef2
abbr        #ifndef HOGE...
    #ifndef ${1:HOGE_}_H_INCLUDED
    #define $1_H_INCLUDED
    ${0:TARGET}
    #endif // #ifndef $1_H_INCLUDED

snippet     ublas
abbr        namespace ublas =...
    namespace ublas = boost::numeric::ublas;

snippet     ffunc
abbr        void func(...
    ${1:void} ${2:func_name}(${3:attr})
    {
        ${0}
    }

snippet     forstd
abbr        for (std::size_t index) {}
    for (std::size_t ${1:index} = 0; $1 < ${2:size}; ++$1) {
        ${0:TARGET}
    }

snippet     p
options     head
  std::cout << ${0:TARGET} << std::endl;

snippet     bs
abbr        boost::shared_ptr
    boost::shared_ptr<${1}>${2} ${0:TARGET}

snippet     bv
abbr        boost::numeric::ublas::vector
    boost::numeric::ublas::vector<${1}>${2} ${0:TARGET}

snippet     sv
abbr        std::vector
    std::vector<${1}> ${0:TARGET}

snippet     bm
abbr        boost::numeric::ublas::matrix
    boost::numeric::ublas::matrix<${1}>${2} ${0:TARGET}

snippet     mfunc
abbr        void className::funcitonName() {}
    ${1:void} ${2:class}::${3:function}(${4:attr})
    {
        ${0:last}
    }

snippet     sep1
abbr        /*--- comment ---*/
    /*--------------------------------------------------------------------------
    * ${0:TARGET}
    *------------------------------------------------------------------------*/

snippet     cdcomment
abbr        Constructers and Destructers
    Constructers and Destructer

snippet     mcomment
abbr        member functions
    member functions

snippet     pvfcomment
abbr        pure virtual functions
    pure virtual functions

snippet     ipvfcomment
abbr        inherited pure virtual functions
    inherited pure virtual functions

snippet     pvcomment
abbr        private variables 
    private variables

snippet     pfcomment
abbr        private variables 
    private functions

snippet targetheader
abbr targetheader
	#pragma once
	
	namespace ${1:namespace} {
		class ${2:basename} {
		//private typedef
		private:
		//public typedef
		public:
		//public function
		public:
			${3:end}
		//private function
		private:
		//private members
		private:
		}; // class $2 {
	} // namespace $1 {

snippet targetsource
abbr target source
	namespace ${1:namespace} {
		${0:mfunc}
	} // namespace $1 {

snippet     testclass
abbr        testclass
    #ifndef ${1}_TEST_H_INCLUDED
    #define $1_TEST_H_INCLUDED

    #include <cppunit/extensions/HelperMacros.h>

    #include <boost/shared_ptr.hpp>

    #include <${2:test target}>

    namespace ${3:test namespace}_test {

        class ${4:TestClassName} : public CppUnit::TestFixture {
            CPPUNIT_TEST_SUITE($4);
            CPPUNIT_TEST(${0:test function});
            CPPUNIT_TEST_SUITE_END();

        public:
            $4();
            ~$4();

            void setUp();
            void tearDown();
                
        private:

        };  

        CPPUNIT_TEST_SUITE_REGISTRATION($4);
    } // namespace smoking_test

    #endif

snippet     testmain
abbr        int main(...
options     head
    #include <cppunit/ui/text/TestRunner.h>
    #include <cppunit/extensions/TestFactoryRegistry.h>

    int main(int argc, char const* argv[])
    {
        CppUnit::TextUi::TestRunner runner;
        runner.addTest(
            CppUnit::TestFactoryRegistry::getRegistry().makeTest());
        bool retcode = runner.run();

        return !retcode;
    }
  

delete class
snippet     class
abbr        class
options     head
	class ${1:name} {
	//private typedef
	private:
	//public typedef
	public:
	//public function
	public:
		${0:end}
	//private function
	private:
	//private members
	private:
	};

snippet     struct
abbr        simple struct
options     head
    struct ${1:name} {
        ${0:end}
    };

